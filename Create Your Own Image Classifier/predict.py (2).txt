import argparse
import os
import time
import torch
import json

from torch import nn, optim
from torchvision import datasets, models, transforms
from collections import OrderedDict

import numpy as np
import matplotlib.pyplot as plt

import torchvision
import PIL

parser = argparse.ArgumentParser (description = 'Parser _ predict')


parser.add_argument ('image_dir', help = 'Image Path', type = str)
parser.add_argument ('--load_dir', help = 'Checkpoint Path', default = "checkpoint.pth", type = str)
parser.add_argument ('--top_k', help = 'no.of K classes, [5] is set', default = 5, type = int)
parser.add_argument ('--cat_names', help = 'JSON Path', type = str)
parser.add_argument ('--GPU', help = "For Gpu Drop GPU", type = str)

args = parser.parse_args ()


if args.GPU == 'GPU':
    dev = 'cuda'
else:
    dev = 'cpu'

def load_model_ch(file_path):
    checkpoint = torch.load(file_path) 
    if checkpoint ['arch'] == 'vgg19':
        model = models.vgg19(pretrained = True)
    else: 
        model = models.alexnet(pretrained = True) 
    
    model.classifier = checkpoint ['classifier']
    model.load_state_dict(checkpoint ['state_dict'])
    model.class_to_idx = checkpoint ['class_to_idx']
    
    for param in model.parameters(): 
        param.requires_grad = False
    
    return load_model

def process_image(image):
    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,
        returns an Numpy array
    '''
    
    # TODO: Process a PIL image for use in a PyTorch model
    image_pil = PIL.Image.open(image_path).convert('RGB')
    image_transforms = transforms.Compose([
                                transforms.Resize(256),
                                transforms.CenterCrop(224), 
                                transforms.ToTensor(), 
                                transforms.Normalize(mean=[0.485, 0.456, 0.406],std=[0.229, 0.224, 0.225]) 
                                ])
    
    image = image_transforms(image_pil)
    
    return image

def predict(image_path, model, topk=5):
    ''' Predict the class (or classes) of an image using a trained deep learning model.
    '''
    
    # TODO: Implement the code to predict the class from an image file 
    model.to(dev)
    
    image=Image.open(image_path)
    image_tot = process_image(image)
    image_tot = image_tot.unsqueeze_(0)
    image_tot = image_tot.float()
    
    with torch.no_grad():
        output = model.forward(image_tot.cuda())
        probability = F.softmax(output.data,dim=1)
        top_prop = np.array(probability.topk(topk)[0][0])
        index_to_class = {val: key for key, val in model.class_to_idx.items()}
        top_classes = [np.int(index_to_class[each]) for each in np.array(probability.topk(topk)[1][0])]

    return probability.topk(topk)

def sanity_check(image, image_path, load_model):
    fig, ax = plt.subplots()
    
    image = process_image(image)
    
    to_parse = predict(image_path, model)
    
    prob = to_parse[0][0].cpu().numpy()
    classes = to_parse[1][0].cpu().numpy()
    
    mapping = {val: key for key, val in
                model.class_to_idx.items()
                }
    
    classes = [mapping [item] for item in classes]
    classes = [cat_to_name[str(index)] for index in classes]
    
    
    imshow(image)
    plt.show()  
    
    for Zeon in range(len(classes)):
     print("{}. Predicting: ___{}___ with probability: {:.2f}%.".format(Zeon+1, classes[Zeon], prob[Zeon]*100))

